1. 问题描述与分析
一般来说，如果库的头文件不在 /usr/include 目录中，那么在编译的时候需要用 -I 参数指定其路径。由于同一个库在不同系统上可能位于不同的目录下，用户安装库的时候也可以将库安装在不同的目录下，所以即使使用同一个库，由于库的路径的不同，造成了用 -I 参数指定的头文件的路径也可能不同，其结果就是造成了编译命令界面的不统一。如果使用-L 参数，也会造成连接界面的不统一。编译和连接界面不统一会为库的使用带来麻烦。

2. 解决方案
为了解决编译和连接界面不统一的问题，人们找到了一些解决办法。其基本思想就是：事先把库的位置信息等保存起来，需要的时候再通过特定的工具将其中有用的信息提取出来供编译和连接使用。这样，就可以做到编译和连接界面的一致性。其中，目前最为常用的库信息提取工具就是下面介绍的pkg-config。

2.1 pkg-config提供的功能
pkg-config提供了以下几个功能:
1.检查库的版本号。如果所需要的库的版本不满足要求，它会打印出错误信息，避免链接错误版本的库文件。
2. 获得编译预处理参数，如宏定义，头文件的位置。
3.获得链接参数，如库及依赖的其它库的位置，文件名及其它一些连接参数。
4.自动加入所依赖的其它库的设置。

2.2 pkg-config实现的原理
pkg-config是通过库提供的一个.pc文件获得库的各种必要信息的，包括版本信息、编译和连接需要的参数等。这些信息可以通过pkg-config提供的参数单独提取出来直接供编译器和连接器使用。pkg-config会寻找默认位置/usr/lib/pkgconfig(32位) || /usr/lib64/pkgconfig(64位)的.pc文件或者根据变量PKG_CONFIG_PATH定义的位置来寻找.pc文件，根据.pc文件获取库的信息。
一个.pc文件的例子,文件名为openssl.pc:

prefix=/home/liyakai/svn.kedacom.com/Security/trunk/KdvSec_1_0/10-common
libdir=${prefix}/lib/debug/linux_x64
includedir=${prefix}/include/kdssl/openssl

Name: OpenSSL-libopenssl
Description: OpenSSL library
Version: 1.1.0b
Libs: -L${libdir} -lkdssl
Cflags: -I${includedir}
Requires: libcrypto
1
2
3
4
5
6
7
8
9
10
2.3 pkg-config使用方法
使用pkg-config的–cflags参数可以给出在编译时所需要的选项，–libs参数可以给出连接时的选项。例如，假设一个sample.c的程序用到了openssl库，就可以这样编译：

$ gcc -c `pkg-config "openssl > 1.0.0" --cflags openssl` sample.c
1
然后这样连接：

$ gcc sample.o -o sample `pkg-config "openssl > 1.0.0"  --libs openssl`
1
或者上面两步也可以合并为以下一步：

$ gcc sample.c -o sample `pkg-config "openssl > 1.0.0"  --cflags --libs openssl`
1
2.4 需要注意的地方
pkg-config只是解决了编译和链接阶段库路径的问题，运行时路径仍然需要另外的操作。
设置库文件的搜索路径有下列两种方式，可任选其一使用：
1.在环境变量LD_LIBRARY_PATH中指明库的搜索路径。
2.在/etc/ld.so.conf文件中添加库的搜索路径。
后者需要用root权限执行/sbin/ldconfig，才能将库的路径更新到/etc/ld.so.cache中。

3. 总结
可以看到：由于使用了pkg-config工具来获得库的选项，所以不论库安装在什么目录下，都可以使用相同的编译和连接命令，带来了编译和连接界面的统一。